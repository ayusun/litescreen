/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef litescreen_TYPES_H
#define litescreen_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace thrift { namespace litescreen {

typedef struct _DeviceData__isset {
  _DeviceData__isset() : width(false), height(false), depth(false), bits_per_pixel(false), bytes_per_line(false), byteorder(false), fromDevice(false) {}
  bool width;
  bool height;
  bool depth;
  bool bits_per_pixel;
  bool bytes_per_line;
  bool byteorder;
  bool fromDevice;
} _DeviceData__isset;

class DeviceData {
 public:

  static const char* ascii_fingerprint; // = "458493A9F4060F6499357D68C4F331E2";
  static const uint8_t binary_fingerprint[16]; // = {0x45,0x84,0x93,0xA9,0xF4,0x06,0x0F,0x64,0x99,0x35,0x7D,0x68,0xC4,0xF3,0x31,0xE2};

  DeviceData() : width(0), height(0), depth(0), bits_per_pixel(0), bytes_per_line(0), byteorder(0), fromDevice(0) {
  }

  virtual ~DeviceData() throw() {}

  int32_t width;
  int32_t height;
  int32_t depth;
  int32_t bits_per_pixel;
  int32_t bytes_per_line;
  int32_t byteorder;
  int32_t fromDevice;

  _DeviceData__isset __isset;

  void __set_width(const int32_t val) {
    width = val;
  }

  void __set_height(const int32_t val) {
    height = val;
  }

  void __set_depth(const int32_t val) {
    depth = val;
  }

  void __set_bits_per_pixel(const int32_t val) {
    bits_per_pixel = val;
  }

  void __set_bytes_per_line(const int32_t val) {
    bytes_per_line = val;
  }

  void __set_byteorder(const int32_t val) {
    byteorder = val;
  }

  void __set_fromDevice(const int32_t val) {
    fromDevice = val;
  }

  bool operator == (const DeviceData & rhs) const
  {
    if (!(width == rhs.width))
      return false;
    if (!(height == rhs.height))
      return false;
    if (!(depth == rhs.depth))
      return false;
    if (!(bits_per_pixel == rhs.bits_per_pixel))
      return false;
    if (!(bytes_per_line == rhs.bytes_per_line))
      return false;
    if (!(byteorder == rhs.byteorder))
      return false;
    if (!(fromDevice == rhs.fromDevice))
      return false;
    return true;
  }
  bool operator != (const DeviceData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeviceData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(DeviceData &a, DeviceData &b);

typedef struct _ImageData__isset {
  _ImageData__isset() : data(false), orig_size(false), compressed_size(false) {}
  bool data;
  bool orig_size;
  bool compressed_size;
} _ImageData__isset;

class ImageData {
 public:

  static const char* ascii_fingerprint; // = "28C2ECC89260BADB9C70330FBF47BFA8";
  static const uint8_t binary_fingerprint[16]; // = {0x28,0xC2,0xEC,0xC8,0x92,0x60,0xBA,0xDB,0x9C,0x70,0x33,0x0F,0xBF,0x47,0xBF,0xA8};

  ImageData() : data(), orig_size(0), compressed_size(0) {
  }

  virtual ~ImageData() throw() {}

  std::string data;
  int32_t orig_size;
  int32_t compressed_size;

  _ImageData__isset __isset;

  void __set_data(const std::string& val) {
    data = val;
  }

  void __set_orig_size(const int32_t val) {
    orig_size = val;
  }

  void __set_compressed_size(const int32_t val) {
    compressed_size = val;
  }

  bool operator == (const ImageData & rhs) const
  {
    if (!(data == rhs.data))
      return false;
    if (!(orig_size == rhs.orig_size))
      return false;
    if (!(compressed_size == rhs.compressed_size))
      return false;
    return true;
  }
  bool operator != (const ImageData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ImageData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ImageData &a, ImageData &b);

}} // namespace

#endif
